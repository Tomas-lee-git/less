// variables
@color: pink;
@bgColor: skyblue;
@width: 100%;
@link-color: #428bca;
@link-hover-color: darken(@link-color, 10%);
.wrap {
    color: @color;
    background-color: @link-color;
    width: @width;
    height: @width;
}

.border {
    border-top: 1px solid rgb(168, 6, 6);
    border-bottom: 1px solid rgb(139, 176, 190);
}

#menu a {
    color: yellowgreen;
    &:hover {
        color: @link-hover-color;
    }
}

// selectors
@my-selector: banner;
.@{my-selector} {
    color: yellow;
}

// urls
@images: "./images";
body {
    background: url("@{images}/2.jpg")
}

// import Statements
@themes: "../../src/themes";
// @import "@{themes}/tidal-wave.less"
// properties
@bg: background;
body {
    @{bg}-color: red;
}

// variable variables
// @c:bg;
// @bgc:@@c;
// body{
//     @{bgc}-color:blue;
// }
// lazy evaluation
// variables do not have to be declared before being used.
@c: bg;
body {
    @{bgc}-color: blue;
}

@bgc: @@c;
@bgc: border;
@bgc: background;
/*
When defining a variable twice, the last definition of the variable is used, 
searching from the current scope upwards. This is similar to css itself where the last property inside a definition is used to determine the value.
*/

@bgc: border;
@bgc: background;
// Properties as Variables (NEW!)
.first {
    color: #efefef;
    background-color: $color;
}

// parent selectors
body {
    .forth {
        font-size: 20px;
        color: #000; //  & p:first-child{
        //      color:red;
        //  }
        //  & p:last-child{
        //     color:green;
        // }
        &:hover {
            font-size: 50px;
        }
    }
}

// Combinatorial Explosion
// & can also be used to generate every possible permutation of selectors in a comma separated list:
p,
a,
ul,
li {
    border-top: 2px dotted #366;
    &+& {
        border-top: 0px;
    }
}

//   This expands to all possible (16) combinations of the specified elements:
p,
a,
ul,
li {
    border-top: 2px dotted #366;
}

p+p,
p+a,
p+ul,
p+li,
a+p,
a+a,
a+ul,
a+li,
ul+p,
ul+a,
ul+ul,
ul+li,
li+p,
li+a,
li+ul,
li+li {
    border-top: 0;
}

//extends
.forth {
    p {
        &:extend(.color);
    }
}

.color {
    color: pink;
}

// extend "all"
.f {
    color: green;
    font-size: 20px;
    font-style: italic;
}

.fifth:extend(.fifth all) {}

// Top level extend matches everything including selectors inside nested media:
.f {
    color: green;
    font-size: 20px;
    font-style: italic;
    span {
        color: red;
        font-size: 30px;
    }
}

.fifth:extend(.f span) {}

.fifth {
    &:extend(f,
    span);
    span {
        color: black;
    }
}

// mixin
.blue-italic() {
    color: blue;
    font-style: italic;
    font-size: 25px;
    box-shadow+: inset 0 0 10px #555;
}

// Merge
.sixth {
    .blue-italic();
    box-shadow+: 0 0 10px #555;
}

// mixins
.hover() {
    &:hover {
        font-size: 40px;
        color: darkblue;
    }
}

.sixth {
    .hover();
}

// Namespaces
#my-library {
    .i-color() {
        i {
            color: #fff;
        }
    }
}

.sixth {
    #my-library>.i-color();
}

// Guarded Namespaces

#namespace {
    .mixin() when (@mode = huge) { /* */ }
  }

  //!important 

  .foo (@bg: #f5f5f5, @color: #900) {
    background: @bg;
    color: @color;
  }
  .unimportant {
    .foo();
  }
  .important {
    .foo() !important;
  }
// result in
  .important {
    background: #f5f5f5 !important;
    color: #900 !important;
  }

//   Parametric Mixins
.length(@length:200px){
    width: @length;
    height: @length/2;
    font-size: @length/5;
}
#seventh{
    .length(500px)
}
// Parametric mixins can also have default values for their parameters:
#seventh{
    .length()
}

// Mixins with Multiple Parameters, It is recommended to use semicolon. 
.mixin(@color; @padding: 2) {
    color-2: @color;
    padding-2: @padding;
  }

//  Named Parameters ,can be referenced by its name and they do not have to be in any special order
.mixin(@color: black; @margin: 10px; @padding: 20px) {
    color: @color;
    margin: @margin;
    padding: @padding;
  }
  .class1 {
    .mixin(@margin: 20px; @color: #33acfe);
  }
  .class2 {
    .mixin(#efca44; @padding: 40px); 
  }

//@arguments Variable
.font(@size:30px;@color:red;@style:italic){
    font:@argument;
}

// Advanced Arguments and the @rest Variable
.mixin(@a; @rest...) {
    // @rest is bound to arguments after @a
    // @arguments is bound to all arguments
 }

//  Pattern-matching
.mixin(@s; @color) { ... }

.class {
  .mixin(@switch; #888);
}
// Now let's say we want .mixin to behave differently, based on the value of @switch, we could define .mixin as such:

.mixin(dark; @color) {
  color: darken(@color, 10%);
}
.mixin(light; @color) {
  color: lighten(@color, 10%);
}
.mixin(@_; @color) {
  display: block;
}
// Now, if we run:

@switch: light;

.class {
  .mixin(@switch; #888);
}
// We will get the following CSS:

.class {
  color: #a2a2a2;
  display: block;
}
// Where the color passed to .mixin was lightened. If the value of @switch was dark, the result would be a darker color.

// Here's what happened:

// The first mixin definition didn't match because it expected dark as the first argument.
// The second mixin definition matched, because it expected light.
// The third mixin definition matched because it expected any value.
// Only mixin definitions which matched were used. Variables match and bind to any value. Anything other than a variable matches only with a value equal to itself.

// We can also match on arity, here's an example:

.mixin(@a) {
  color: @a;
}
.mixin(@a; @b) {
  color: fade(@a; @b);
}
// Now if we call .mixin with a single argument, we will get the output of the first definition, but if we call it with two arguments, we will get the second definition, namely @a faded to @b.


// Using Mixins as Functions

.average(@x, @y) {
    @result: ((@x + @y) / 2);
  }
  
  div {
    // call a mixin and look up its "@return" value
    padding:.average(10x,30px)[@result]
  }
//   Results in:
  
  div {
    padding: 20px;
  }

//   Overriding mixin values
// If you have multiple matching mixins, all rules are evaluated and merged, and the last matching value with that identifier is returned. This is similar to the cascade in CSS, and it allows you to "override" mixin values.

// Unnamed lookups

@dr: {
    value: foo;
  }
  .box {
    my-value: @dr[];
  }
//   This outputs:
  
  .box {
    my-value: foo;
  }

//   Recursive Mixins
.loop(@counter) when (@counter > 0) {
    width: (10px * @counter); // code for each iteration
    .loop((@counter - 1));    // next iteration
  }
  
  div {
    .loop(5); // launch the loop
  }


//   Mixin Guards
//   via guarded mixins instead of if/else statements, in the vein of @media query feature specifications.

.mixin(@a) when (lightness(@a) >= 50%) {
    background-color: black;
  }
  .mixin(@a) when (lightness(@a) < 50%) {
    background-color: white;
  }
  .mixin(@a) {
    color: @a;
  }
//   The key is the when keyword, which introduces a guard sequence (here with only one guard). Now if we run the following code:
  
  .class1 { .mixin(#ddd) }
  .class2 { .mixin(#555) }
//   Here's what we'll get:
  
  .class1 {
    background-color: black;
    color: #ddd;
  }
  .class2 {
    background-color: white;
    color: #555;
  }

//   Guard Comparison Operators

.truth(@a) when (@a) { ... }
.truth(@a) when (@a = true) { ... }

// Any value other than the keyword true is false:

.class {
  .truth(40); // Will not match any of the above definitions.
}
// Guard Logical Operators

// Use the and keyword to combine guards:
.mixin(@a) when (isnumber(@a)) and (@a > 0) { ... }

// You can emulate the or operator by separating guards with a comma ,. If any of the guards evaluate to true, it's considered a match:
.mixin(@a) when (@a > 10), (@a < -10) { ... }

// Use the not keyword to negate conditions:
.mixin(@b) when not (@b > 0) { ... }

// Type Checking Functions

// Here are the basic type checking functions:

// iscolor
// isnumber
// isstring
// iskeyword
// isurl

// If you want to check if a value is in a specific unit in addition to being a number, you may use one of:

// ispixel
// ispercentage
// isem
// isunit


// Variable variables in lookups
// The lookup value that is returned can itself be variable. As in, you can write:

@config: {
  @dark: {
    primary: darkblue;
  }
  @light: {
    primary: lightblue;
  }
}

.box {
  @lookup: dark;
  color: @config[@@lookup][primary];
}
// This will output:

.box {
  color: darkblue;
}